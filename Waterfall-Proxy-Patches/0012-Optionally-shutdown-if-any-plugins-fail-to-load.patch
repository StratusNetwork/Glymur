From 253dfa361ecb1b920208662c74b9afb65cc247a1 Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Tue, 1 Jan 2019 00:09:13 -0600
Subject: [PATCH] Optionally shutdown if any plugins fail to load


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index f792426e..24b19047 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -193,4 +193,9 @@ public interface ProxyConfig
     boolean isDisableModernTabLimiter();
 
     boolean isAllowEmptyPackets();
+
+    /**
+     * Shutdown immediately if any plugins fail to load
+     */
+    boolean isRequireAllPlugins();
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index f2cefd57..268e6504 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -23,6 +23,7 @@ import java.util.Stack;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
 import java.util.logging.Level;
+import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
@@ -50,7 +51,8 @@ public class PluginManager
     private final Map<String, Plugin> plugins = new LinkedHashMap<>();
     private final Map<String, Command> commandMap = new HashMap<>();
     private Map<String, PluginDescription> toLoad = new HashMap<>();
-    private final Map<String, PluginClassloader> classLoaders = new HashMap<>();
+    private final @Getter List<Plugin> loadedPlugins = new ArrayList<>();
+    private final @Getter List<Plugin> enabledPlugins = new ArrayList<>();
     private final Multimap<Plugin, Command> commandsByPlugin = ArrayListMultimap.create();
     private final Multimap<Plugin, Listener> listenersByPlugin = ArrayListMultimap.create();
 
@@ -238,16 +240,16 @@ public class PluginManager
         return plugins.get( name );
     }
 
-    public void loadPlugins()
+    public void loadPlugins() throws Exception
     {
         Map<PluginDescription, Boolean> pluginStatuses = new HashMap<>();
         Map<PluginDescription, PluginClassloader> pluginLoaders = new HashMap<>();
         for ( Map.Entry<String, PluginDescription> entry : toLoad.entrySet() )
         {
             PluginDescription plugin = entry.getValue();
-            if ( !enablePlugin( pluginStatuses, pluginLoaders, new Stack<PluginDescription>(), plugin ) )
+            if ( !loadPlugin( pluginStatuses, pluginLoaders, new Stack<PluginDescription>(), plugin ) )
             {
-                ProxyServer.getInstance().getLogger().log( Level.WARNING, "Failed to enable {0}", entry.getKey() );
+                ProxyServer.getInstance().getLogger().log( Level.SEVERE, "Failed to load {0}", entry.getKey() );
             }
         }
         toLoad.clear();
@@ -256,23 +258,27 @@ public class PluginManager
 
     public void enablePlugins()
     {
-        for ( Plugin plugin : plugins.values() )
+        for ( Plugin plugin : loadedPlugins )
         {
             try
             {
                 plugin.onEnable();
+                enabledPlugins.add(plugin);
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "Enabled plugin {0} version {1} by {2}", new Object[]
                 {
                     plugin.getDescription().getName(), plugin.getDescription().getVersion(), plugin.getDescription().getAuthor()
                 } );
             } catch ( Throwable t )
             {
-                ProxyServer.getInstance().getLogger().log( Level.WARNING, "Exception encountered when loading plugin: " + plugin.getDescription().getName(), t );
+                ProxyServer.getInstance().getLogger().log( Level.SEVERE, "Exception encountered when enabling plugin: " + plugin.getDescription().getName(), t );
+                if(proxy.getConfig().isRequireAllPlugins()) {
+                    throw t;
+                }
             }
         }
     }
 
-    private boolean enablePlugin(Map<PluginDescription, Boolean> pluginStatuses, Map<PluginDescription, PluginClassloader> pluginLoaders, Stack<PluginDescription> dependStack, PluginDescription plugin)
+    private boolean loadPlugin(Map<PluginDescription, Boolean> pluginStatuses, Map<PluginDescription, PluginClassloader> pluginLoaders, Stack<PluginDescription> dependStack, PluginDescription plugin) throws Exception
     {
         if ( pluginStatuses.containsKey( plugin ) )
         {
@@ -304,12 +310,12 @@ public class PluginManager
                         dependencyGraph.append( element.getName() ).append( " -> " );
                     }
                     dependencyGraph.append( plugin.getName() ).append( " -> " ).append( dependName );
-                    ProxyServer.getInstance().getLogger().log( Level.WARNING, "Circular dependency detected: {0}", dependencyGraph );
+                    ProxyServer.getInstance().getLogger().log( Level.SEVERE, "Circular dependency detected: {0}", dependencyGraph );
                     status = false;
                 } else
                 {
                     dependStack.push( plugin );
-                    dependStatus = this.enablePlugin( pluginStatuses, pluginLoaders, dependStack, depend );
+                    dependStatus = this.loadPlugin( pluginStatuses, pluginLoaders, dependStack, depend );
                     dependStack.pop();
                 }
             }
@@ -320,7 +326,7 @@ public class PluginManager
 
             if ( dependStatus == Boolean.FALSE && plugin.getDepends().contains( dependName ) ) // only fail if this wasn't a soft dependency
             {
-                ProxyServer.getInstance().getLogger().log( Level.WARNING, "{0} (required by {1}) is unavailable", new Object[]
+                ProxyServer.getInstance().getLogger().log( Level.SEVERE, "{0} (required by {1}) is unavailable", new Object[]
                 {
                     String.valueOf( dependName ), plugin.getName()
                 } );
@@ -349,16 +355,24 @@ public class PluginManager
                 clazz.init( proxy, plugin );
                 plugins.put( plugin.getName(), clazz );
                 clazz.onLoad();
+                loadedPlugins.add(clazz);
                 ProxyServer.getInstance().getLogger().log( Level.INFO, "Loaded plugin {0} version {1} by {2}", new Object[]
                 {
                     plugin.getName(), plugin.getVersion(), plugin.getAuthor()
                 } );
             } catch ( Throwable t )
             {
-                proxy.getLogger().log( Level.WARNING, "Error enabling plugin " + plugin.getName(), t );
+                proxy.getLogger().log( Level.SEVERE, "Error loading plugin " + plugin.getName(), t );
+                if(proxy.getConfig().isRequireAllPlugins()) {
+                    throw t;
+                }
             }
         }
 
+        if(!status && proxy.getConfig().isRequireAllPlugins()) {
+            throw new IllegalStateException("Failed to load required plugin " + plugin.getName());
+        }
+
         pluginStatuses.put( plugin, status );
         return status;
     }
diff --git a/bootstrap/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/bootstrap/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index 470733f7..7255e4ed 100644
--- a/bootstrap/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/bootstrap/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -5,13 +5,9 @@ import java.text.SimpleDateFormat;
 import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.concurrent.TimeUnit;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
-import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.ProxyServer;
-import net.md_5.bungee.api.chat.ComponentBuilder;
-import net.md_5.bungee.command.ConsoleCommandSender;
 
 public class BungeeCordLauncher
 {
@@ -53,7 +49,12 @@ public class BungeeCordLauncher
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
         bungee.getLogger().info( "Enabled Glymur version " + bungee.getVersion() );
-        bungee.start();
+        try {
+            bungee.start();
+        } catch(Exception e) {
+            bungee.stop("Internal error");
+            throw e;
+        }
 
         if ( !options.has( "noconsole" ) )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 92fc346f..0bfebc8d 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -22,7 +22,6 @@ import io.netty.util.ResourceLeakDetector;
 import java.io.File;
 import java.io.FileReader;
 import java.io.IOException;
-import java.io.PrintStream;
 import java.net.InetSocketAddress;
 import java.text.MessageFormat;
 import java.util.ArrayList;
@@ -436,7 +435,7 @@ public class BungeeCord extends ProxyServer
 
                 // TODO: Fix this shit
                 getLogger().info( "Disabling plugins" );
-                for ( Plugin plugin : Lists.reverse( new ArrayList<>( pluginManager.getPlugins() ) ) )
+                for ( Plugin plugin : Lists.reverse( new ArrayList<>( pluginManager.getEnabledPlugins() ) ) )
                 {
                     try
                     {
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
index 2599b579..64d8efa4 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/Configuration.java
@@ -66,6 +66,7 @@ public abstract class Configuration implements ProxyConfig
     private int compressionThreshold = 256;
     private boolean preventProxyConnections;
     private boolean forgeSupport = true; // Waterfall: default to enabled
+    private boolean requireAllPlugins;
 
     @Synchronized("serversLock") // Waterfall
     public void load()
@@ -97,6 +98,7 @@ public abstract class Configuration implements ProxyConfig
         compressionThreshold = adapter.getInt( "network_compression_threshold", compressionThreshold );
         preventProxyConnections = adapter.getBoolean( "prevent_proxy_connections", preventProxyConnections );
         forgeSupport = adapter.getBoolean( "forge_support", forgeSupport );
+        requireAllPlugins = adapter.getBoolean( "require_all_plugins", requireAllPlugins );
 
         disabledCommands = new CaseInsensitiveSet( (Collection<String>) adapter.getList( "disabled_commands", Arrays.asList( "disabledcommandhere" ) ) );
 
-- 
2.19.0


From 6811bb6dbed7de7071b671619575079dc32a5833 Mon Sep 17 00:00:00 2001
From: Austin Mayes <austin@avicus.net>
Date: Tue, 1 Jan 2019 01:09:44 -0600
Subject: [PATCH] Guice plugin support


diff --git a/api/pom.xml b/api/pom.xml
index 3c04cccf..0ec43d98 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -50,5 +50,11 @@
             <artifactId>slf4j-api</artifactId>
             <version>1.7.25</version>
         </dependency>
+
+        <dependency>
+            <groupId>network.stratus</groupId>
+            <artifactId>ubique</artifactId>
+            <version>1.0.0-SNAPSHOT</version>
+        </dependency>
     </dependencies>
 </project>
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyInstanceModule.java b/api/src/main/java/net/md_5/bungee/api/ProxyInstanceModule.java
new file mode 100644
index 00000000..d5ec41c0
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyInstanceModule.java
@@ -0,0 +1,30 @@
+package net.md_5.bungee.api;
+
+import java.util.Collection;
+import net.md_5.bungee.api.plugin.Plugin;
+import net.md_5.bungee.api.plugin.PluginInstanceModule;
+import network.stratus.ubique.inject.KeyedModule;
+import network.stratus.ubique.inject.ProtectedBinder;
+
+public class ProxyInstanceModule extends KeyedModule {
+
+    private final ProxyServer proxy;
+    private final Collection<Plugin> plugins;
+
+    public ProxyInstanceModule(ProxyServer proxy, Collection<Plugin> plugins) {
+        super(proxy);
+        this.proxy = proxy;
+        this.plugins = plugins;
+    }
+
+    @Override
+    protected void configure() {
+        install(new ProxyModule());
+        bind(ProxyServer.class).toInstance(proxy);
+
+        for(Plugin plugin : plugins) {
+            ProtectedBinder.newProtectedBinder(binder())
+                .install(new PluginInstanceModule(plugin));
+        }
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyModule.java b/api/src/main/java/net/md_5/bungee/api/ProxyModule.java
new file mode 100644
index 00000000..4e41e528
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyModule.java
@@ -0,0 +1,45 @@
+package net.md_5.bungee.api;
+
+import com.google.inject.Provides;
+import java.util.Collection;
+import java.util.Map;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.PluginManager;
+import net.md_5.bungee.api.scheduler.TaskScheduler;
+import network.stratus.ubique.inject.KeyedModule;
+
+public class ProxyModule extends KeyedModule {
+
+    @Override
+    protected void configure() {
+
+    }
+
+    @Provides
+    PluginManager pluginManager(ProxyServer proxy) {
+        return proxy.getPluginManager();
+    }
+
+    @Provides
+    TaskScheduler bukkitScheduler(ProxyServer proxy) {
+        return proxy.getScheduler();
+    }
+
+    @Provides
+    CommandSender consoleCommandSender(ProxyServer proxy) {
+        return proxy.getConsole();
+    }
+
+    @Provides
+    Map<String, ServerInfo> serverMap(ProxyServer proxy) {
+        return proxy.getServersCopy();
+    }
+
+    @Provides
+    Collection<ProxiedPlayer> players(ProxyServer proxy) {
+        return proxy.getPlayers();
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/ModularPlugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/ModularPlugin.java
new file mode 100644
index 00000000..7617746c
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/ModularPlugin.java
@@ -0,0 +1,19 @@
+package net.md_5.bungee.api.plugin;
+
+import com.google.inject.Module;
+import net.md_5.bungee.api.plugin.Plugin;
+import network.stratus.ubique.inject.ProtectedBinder;
+
+class ModularPlugin extends Plugin {
+
+    private final Module module;
+
+    ModularPlugin(Module module) {
+        this.module = module;
+    }
+
+    @Override
+    public void configure(ProtectedBinder binder) {
+        binder.install(module);
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 2e5ae4fb..acb785e8 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -1,15 +1,19 @@
 package net.md_5.bungee.api.plugin;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.google.inject.Inject;
+import com.google.inject.Injector;
 import java.io.File;
 import java.io.InputStream;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.logging.Logger;
 import lombok.Getter;
+import lombok.Setter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
+import network.stratus.ubique.inject.ProtectedBinder;
 
 /**
  * Represents any Plugin that may be loaded at runtime to enhance existing
@@ -18,6 +22,9 @@ import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
 public class Plugin
 {
 
+    @Getter @Setter
+    private boolean active;
+
     @Getter
     private PluginDescription description;
     @Getter
@@ -27,12 +34,32 @@ public class Plugin
     @Getter
     private Logger logger;
 
+    @Inject private Injector injector;
+
+    protected void assertInjected() {
+        if(injector == null) {
+            throw new IllegalStateException("Not available until plugin has been injected");
+        }
+    }
+
+    public Injector injector() {
+        assertInjected();
+        return injector;
+    }
+
     // Waterfall start - Allow plugins to use SLF4J for logging
     public org.slf4j.Logger getSLF4JLogger() {
         return org.slf4j.LoggerFactory.getLogger(logger.getName());
     }
     // Waterfall end
 
+    /**
+     * Called when binding is being set up. The binder can only be used during this method.
+     */
+    public void configure(ProtectedBinder binder)
+    {
+    }
+
     /**
      * Called when the plugin has just been loaded. Most of the proxy will not
      * be initialized, so only use it for registering
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginInstanceModule.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginInstanceModule.java
new file mode 100644
index 00000000..9bcb6af4
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginInstanceModule.java
@@ -0,0 +1,19 @@
+package net.md_5.bungee.api.plugin;
+
+import network.stratus.ubique.inject.ProtectedModule;
+
+public class PluginInstanceModule extends ProtectedModule {
+
+    private final Plugin plugin;
+
+    public PluginInstanceModule(Plugin plugin) {
+        this.plugin = plugin;
+    }
+
+    @Override
+    protected void configure() {
+        install(new PluginModule());
+        bind(Plugin.class).toInstance(plugin);
+        plugin.configure(binder());
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 268e6504..a48d2abd 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -2,8 +2,11 @@ package net.md_5.bungee.api.plugin;
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ArrayListMultimap;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Multimap;
 import com.google.common.eventbus.Subscribe;
+import com.google.inject.Guice;
+import com.google.inject.Module;
 import java.io.File;
 import java.io.InputStream;
 import java.lang.reflect.Method;
@@ -22,11 +25,13 @@ import java.util.Set;
 import java.util.Stack;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.logging.Handler;
 import java.util.logging.Level;
 import lombok.Getter;
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyInstanceModule;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.event.EventBus;
@@ -51,6 +56,7 @@ public class PluginManager
     private final Map<String, Plugin> plugins = new LinkedHashMap<>();
     private final Map<String, Command> commandMap = new HashMap<>();
     private Map<String, PluginDescription> toLoad = new HashMap<>();
+    private final @Getter List<Plugin> instantiatedPlugins = new ArrayList<>();
     private final @Getter List<Plugin> loadedPlugins = new ArrayList<>();
     private final @Getter List<Plugin> enabledPlugins = new ArrayList<>();
     private final Multimap<Plugin, Command> commandsByPlugin = ArrayListMultimap.create();
@@ -254,12 +260,32 @@ public class PluginManager
         }
         toLoad.clear();
         toLoad = null;
+
+        try {
+            Guice.createInjector(new ProxyInstanceModule(proxy, loadedPlugins));
+        } catch(RuntimeException ex) {
+            proxy.getLogger().log(Level.SEVERE, "Injector creation failed, server will shut down", ex);
+            throw ex;
+        }
+
+        for(Plugin plugin : loadedPlugins) {
+            try {
+                plugin.onLoad();
+            } catch(Throwable t) {
+                proxy.getLogger().log( Level.SEVERE, "Error loading plugin " + plugin.getDescription().getName(), t );
+                if(proxy.getConfig().isRequireAllPlugins()) {
+                    throw t;
+                }
+            }
+        }
     }
 
     public void enablePlugins()
     {
         for ( Plugin plugin : loadedPlugins )
         {
+            if(!plugin.isActive()) continue;
+
             try
             {
                 plugin.onEnable();
@@ -278,6 +304,25 @@ public class PluginManager
         }
     }
 
+    public void disablePlugins() {
+        proxy.getLogger().info( "Disabling plugins" );
+
+        for(Plugin plugin : Lists.reverse(new ArrayList<>(enabledPlugins))) {
+            if(!plugin.isActive()) continue;
+
+            try {
+                plugin.onDisable();
+                for(Handler handler : plugin.getLogger().getHandlers()) {
+                    handler.close();
+                }
+            } catch(Throwable t ) {
+                proxy.getLogger().log( Level.SEVERE, "Exception disabling plugin " + plugin.getDescription().getName(), t );
+            }
+            proxy.getScheduler().cancel( plugin );
+            plugin.getExecutorService().shutdownNow();
+        }
+    }
+
     private boolean loadPlugin(Map<PluginDescription, Boolean> pluginStatuses, Map<PluginDescription, PluginClassloader> pluginLoaders, Stack<PluginDescription> dependStack, PluginDescription plugin) throws Exception
     {
         if ( pluginStatuses.containsKey( plugin ) )
@@ -350,7 +395,16 @@ public class PluginManager
                 } );
                 pluginLoaders.put(plugin, loader);
                 Class<?> main = loader.loadClass( plugin.getMain() );
-                Plugin clazz = (Plugin) main.getDeclaredConstructor().newInstance();
+                final Plugin clazz;
+                if(Plugin.class.isAssignableFrom(main)) {
+                    clazz = (Plugin) main.getDeclaredConstructor().newInstance();
+                } else if(Module.class.isAssignableFrom(main)) {
+                    clazz = new ModularPlugin((Module) main.newInstance());
+                } else {
+                    throw new IllegalStateException("main class `" + main.getName() +
+                                                    "' must extend either " + Plugin.class.getName() +
+                                                    " or " + Module.class.getName());
+                }
 
                 clazz.init( proxy, plugin );
                 plugins.put( plugin.getName(), clazz );
@@ -362,7 +416,7 @@ public class PluginManager
                 } );
             } catch ( Throwable t )
             {
-                proxy.getLogger().log( Level.SEVERE, "Error loading plugin " + plugin.getName(), t );
+                proxy.getLogger().log( Level.SEVERE, "Error instantiating plugin " + plugin.getName(), t );
                 if(proxy.getConfig().isRequireAllPlugins()) {
                     throw t;
                 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java
new file mode 100644
index 00000000..92c94c2e
--- /dev/null
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginModule.java
@@ -0,0 +1,22 @@
+package net.md_5.bungee.api.plugin;
+
+import com.google.inject.Provides;
+import network.stratus.ubique.inject.ProtectedModule;
+
+public class PluginModule extends ProtectedModule {
+
+    @Override
+    protected void configure() {
+
+    }
+
+    @Provides
+    PluginDescription description(Plugin plugin) {
+        return plugin.getDescription();
+    }
+
+    @Provides
+    PluginLogger logger(Plugin plugin) {
+        return (PluginLogger) plugin.getLogger();
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 0bfebc8d..3e9d39d5 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -433,24 +433,7 @@ public class BungeeCord extends ProxyServer
                 saveThread.cancel();
                 // metricsThread.cancel(); // Waterfall: Disable Metrics
 
-                // TODO: Fix this shit
-                getLogger().info( "Disabling plugins" );
-                for ( Plugin plugin : Lists.reverse( new ArrayList<>( pluginManager.getEnabledPlugins() ) ) )
-                {
-                    try
-                    {
-                        plugin.onDisable();
-                        for ( Handler handler : plugin.getLogger().getHandlers() )
-                        {
-                            handler.close();
-                        }
-                    } catch ( Throwable t )
-                    {
-                        getLogger().log( Level.SEVERE, "Exception disabling plugin " + plugin.getDescription().getName(), t );
-                    }
-                    getScheduler().cancel( plugin );
-                    plugin.getExecutorService().shutdownNow();
-                }
+                pluginManager.disablePlugins();
 
                 getLogger().info( "Closing IO threads" );
                 bossEventLoopGroup.shutdownGracefully();
-- 
2.19.0

